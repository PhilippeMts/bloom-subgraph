{"version":3,"sources":["components/QueryVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["QueryVisualizer","MAIN_QUERY","gql","_templateObject","_useQuery","useQuery","loading","error","data","react_default","a","createElement","className","react_loader_spinner_default","type","color","height","width","concat","identities","attestations","nodes","links","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","identity","value","id","bltBalance","subjectOf","attesterOf","val","name","isAttester","length","balanceNumber","bigInt","divide","pow","valueOf","addresses","map","_ref","substr","Math","min","max","push","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","attestation","source","attesterIdentity","target","subjectIdentity","graphData","react_force_graph_2d_module","linkDirectionalParticles","linkDirectionalParticleWidth","client","ApolloClient","uri","process","cache","InMemoryCache","App","react_common_esm","components_QueryVisualizer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8yBAOA,IAmFeA,EAnFS,WACtB,IAAMC,EAAaC,YAAHC,KADYC,EA4BKC,YAASJ,GAAlCK,EA5BoBF,EA4BpBE,QAASC,EA5BWH,EA4BXG,MAAOC,EA5BIJ,EA4BJI,KACxB,GAAIF,EACF,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBACdH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,KAAK,OAAOC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,OAG9D,GAAIV,EAAO,gBAAAW,OAAiBX,GAnCA,IAoCpBY,EAA6BX,EAA7BW,WAAYC,EAAiBZ,EAAjBY,aACdC,EAAQ,GACRC,EAAQ,GAtCcC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAuC5B,QAAAC,EAAAC,EAAuBT,EAAvBU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAmC,KAAxBU,EAAwBN,EAAAO,MACzBC,EAA0CF,EAA1CE,GAAIC,EAAsCH,EAAtCG,WAAYC,EAA0BJ,EAA1BI,UAAWC,EAAeL,EAAfK,WAC/BvB,OAAK,EAAEwB,OAAG,EAAEC,OAAI,EACdC,EAAa,EAAIH,EAAWI,OAC5BC,EAAgBC,IAAOR,GAC1BS,OAAOD,IAAO,IAAIE,IAAIF,IAAO,MAC7BG,UACCN,GACFF,EAAMD,EAAWI,OACjB3B,EAAQ,UACRyB,EAAI,mBAEJD,EAAMI,EACN5B,EAAQ,UACRyB,EAAI,cAENA,GAAI,iBAAAtB,OAAqBe,EAASe,UAAUC,IAC1C,SAAAC,GAAA,IAAGf,EAAHe,EAAGf,GAAH,SAAAjB,OAAeiB,EAAGgB,OAAO,EAAG,GAA5B,UAAAjC,OAAkCiB,EAAGgB,OAAO,GAAI,GAAhD,OADE,sBAAAjC,OAEkByB,EAFlB,uBAAAzB,OAEqDmB,EAAUK,OACjEJ,EAAWI,QACbH,EAAMa,KAAKC,IAAI,GAAID,KAAKE,IAAI,EAAGf,IAC/BlB,EAAMkC,KAAK,CACTpB,KACAI,MACAxB,QACAyB,UAhEwB,MAAAgB,GAAAhC,GAAA,EAAAC,EAAA+B,EAAA,YAAAjC,GAAA,MAAAK,EAAA6B,QAAA7B,EAAA6B,SAAA,WAAAjC,EAAA,MAAAC,GAAA,IAAAiC,GAAA,EAAAC,GAAA,EAAAC,OAAAlC,EAAA,IAmE5B,QAAAmC,EAAAC,EAA0B1C,EAA1BS,OAAAC,cAAA4B,GAAAG,EAAAC,EAAA/B,QAAAC,MAAA0B,GAAA,EAAwC,KAA7BK,EAA6BF,EAAA3B,MACtCZ,EAAMiC,KAAK,CACTS,OAAQD,EAAYE,iBAAiB9B,GACrC+B,OAAQH,EAAYI,gBAAgBhC,MAtEZ,MAAAqB,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAyE5B,IAAMQ,EAAY,CAAE/C,QAAOC,SAC3B,OACEb,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CACED,UAAWA,EACXE,yBAA0B,EAC1BC,6BAA8B,OC1EpC,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAKC,4DACLC,MAAO,IAAIC,MAaEC,mLARX,OACErE,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAgBP,OAAQA,GACtB/D,EAAAC,EAAAC,cAACqE,EAAD,cAJUC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.efa3daad.chunk.js","sourcesContent":["import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport bigInt from \"big-integer\";\nimport Loader from \"react-loader-spinner\";\n\nconst QueryVisualizer = () => {\n  const MAIN_QUERY = gql`\n    {\n      identities(where: { disabled: false }, first: 1000) {\n        id\n        bltBalance\n        subjectOf {\n          id\n        }\n        attesterOf {\n          id\n        }\n        addresses {\n          id\n        }\n      }\n      attestations(first: 1000) {\n        id\n        subjectIdentity {\n          id\n        }\n        attesterIdentity {\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(MAIN_QUERY);\n  if (loading)\n    return (\n      <div className={\"centeringWrapper\"}>\n        <Loader type=\"Grid\" color=\"#0000a0\" height={100} width={100} />\n      </div>\n    );\n  if (error) return `error: ${error}`;\n  const { identities, attestations } = data;\n  const nodes = [];\n  const links = [];\n  for (const identity of identities) {\n    const { id, bltBalance, subjectOf, attesterOf } = identity;\n    let color, val, name;\n    const isAttester = 0 < attesterOf.length;\n    const balanceNumber = bigInt(bltBalance)\n      .divide(bigInt(10).pow(bigInt(18)))\n      .valueOf();\n    if (isAttester) {\n      val = attesterOf.length;\n      color = \"#00f000\";\n      name = `Role: attester`;\n    } else {\n      val = balanceNumber;\n      color = \"#0000f0\";\n      name = `Role: User`;\n    }\n    name += `, Addresses: [${identity.addresses.map(\n      ({ id }) => `${id.substr(0, 6)}â€¦${id.substr(38, 4)} `\n    )}], \\nBLT Balance: ${balanceNumber}, Nb Attestations: ${subjectOf.length +\n      attesterOf.length}`;\n    val = Math.min(20, Math.max(1, val));\n    nodes.push({\n      id,\n      val,\n      color,\n      name\n    });\n  }\n  for (const attestation of attestations) {\n    links.push({\n      source: attestation.attesterIdentity.id,\n      target: attestation.subjectIdentity.id\n    });\n  }\n  const graphData = { nodes, links };\n  return (\n    <ForceGraph2D\n      graphData={graphData}\n      linkDirectionalParticles={2}\n      linkDirectionalParticleWidth={0.64}\n    />\n  );\n};\n\nexport default QueryVisualizer;\n","import React, {Component} from \"react\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient, {InMemoryCache} from \"apollo-boost\";\nimport QueryVisualizer from \"./components/QueryVisualizer\";\n\nif (!process.env.REACT_APP_GRAPHQL_ENDPOINT) {\n  throw new Error(\n    \"REACT_APP_GRAPHQL_ENDPOINT environment variable not defined\"\n  );\n}\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  cache: new InMemoryCache()\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <QueryVisualizer/>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}