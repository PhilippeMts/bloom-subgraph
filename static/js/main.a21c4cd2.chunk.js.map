{"version":3,"sources":["components/MyGraph.js","components/MyQuery.js","App.js","serviceWorker.js","index.js"],"names":["MyGraph","_ref","data","bloomAccounts","bloomAddresses","bloomAddressHistoryItems","nodes","links","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","account","value","push","id","name","val","addresses","length","color","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","accountAddress","source","target","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","address","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","history","addressHistoryItem","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","historyItem","creationBlock","deletionBlock","graphData","react_default","a","createElement","react_force_graph_2d_module","MyQuery","ACCOUNTS_QUERY","gql","_templateObject","_useQuery","useQuery","loading","error","concat","components_MyGraph","client","ApolloClient","uri","process","cache","InMemoryCache","App","react_common_esm","components_MyQuery","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a21c4cd2.chunk.js","sourcesContent":["import React from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\n\nconst MyGraph = ({ data }) => {\n  const { bloomAccounts, bloomAddresses, bloomAddressHistoryItems } = data;\n  const nodes = [];\n  const links = [];\n  for (const account of bloomAccounts) {\n    nodes.push({\n      id: account.id,\n      name: account.id,\n      val: account.addresses.length * 4,\n      color: account.addresses.length ? \"#0000a0\" : \"#a00000\"\n    });\n    for (const accountAddress of account.addresses) {\n      links.push({\n        source: accountAddress.id,\n        target: account.id\n      });\n    }\n  }\n  for (const address of bloomAddresses) {\n    nodes.push({\n      id: address.id,\n      name: address.address,\n      val: 2,\n      color: address.account ? \"#000060\" : \"#600000\"\n    });\n    for (const addressHistoryItem of address.history) {\n      links.push({\n        source: addressHistoryItem.id,\n        target: address.id\n      });\n    }\n  }\n  for (const historyItem of bloomAddressHistoryItems) {\n    nodes.push({\n      id: historyItem.id,\n      name: historyItem.creationBlock,\n      val: 1,\n      color: !historyItem.deletionBlock ? \"#000020\" : \"#200000\"\n    });\n  }\n  const graphData = {nodes, links};\n  return <ForceGraph2D graphData={graphData} />;\n};\n\nexport default MyGraph;\n","import React from \"react\";\nimport {gql} from \"apollo-boost\";\nimport MyGraph from \"./MyGraph\";\nimport {useQuery} from \"@apollo/react-hooks\";\n\nconst MyQuery = () => {\n  const ACCOUNTS_QUERY = gql`\n    {\n      bloomAccounts {\n        id\n        addresses {\n          id\n        }\n      }\n      bloomAddresses {\n        id\n        address\n        account {\n          id\n        }\n        history {\n          id\n        }\n      }\n      bloomAddressHistoryItems {\n        id\n        createdDuringMigration\n        creationBlock\n        deletionBlock\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(ACCOUNTS_QUERY);\n\n  return loading ? (\n    \"loading\"\n  ) : error ? (\n    `error: ${error}`\n  ) : (\n    <MyGraph data={data} />\n  );\n};\n\nexport default MyQuery;\n","import React, {Component} from \"react\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient, {InMemoryCache} from \"apollo-boost\";\nimport \"./App.css\";\nimport MyQuery from \"./components/MyQuery\";\n\nif (!process.env.REACT_APP_GRAPHQL_ENDPOINT) {\n  throw new Error(\n    \"REACT_APP_GRAPHQL_ENDPOINT environment variable not defined\"\n  );\n}\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  cache: new InMemoryCache()\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <MyQuery/>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}