{"version":3,"sources":["components/QueryVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["client","GraphQLClient","process","identitiesPageIdx","attestationsPageIdx","getVisibleLinks","nodes","links","visibleLinks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","l","value","some","n","id","source","target","push","Object","assign","_iterator","Symbol","iterator","next","done","err","return","concatLinksOnWidth","newLinkIds","newLinks","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","key","concat","idx","width","QueryVisualizer","_React$useState","React","useState","_React$useState2","slicedToArray","isLaunched","setIsLaunched","_React$useState3","_React$useState4","setNodes","_React$useState5","_React$useState6","setLinks","processIdentities","prevNodes","_ref","identities","newNodes","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","identity","bltBalance","subjectOf","attesterOf","color","val","name","isAttester","length","balanceNumber","bigInt","divide","pow","valueOf","addresses","map","_ref2","substr","Math","min","max","currentNodes","fetchMoreIdentities","request","then","processAttestations","prevLinks","_ref3","attestations","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","attestation","attesterIdentity","subjectIdentity","currentLinks","fetchMoreAttestations","graphData","react_default","a","createElement","react_force_graph_2d_module","linkWidth","linkDirectionalParticles","linkDirectionalParticleWidth","className","react_loader_spinner_default","type","height","App","components_QueryVisualizer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a166054.chunk.js","sourcesContent":["import React from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport bigInt from \"big-integer\";\nimport { GraphQLClient } from \"graphql-request\";\nimport Loader from \"react-loader-spinner\";\n\nconst client = new GraphQLClient(process.env.REACT_APP_GRAPHQL_ENDPOINT);\nconst itemsPerPage = 256;\nlet identitiesPageIdx = 0;\nlet attestationsPageIdx = 0;\n\nconst getIdentitiesQuery = () =>\n  `\n    {\n        identities(where: { disabled: false }, skip: ${identitiesPageIdx *\n          itemsPerPage}, first: ${itemsPerPage}) {\n            id\n            bltBalance\n            subjectOf {\n                id\n            }\n            attesterOf {\n                id\n            }\n            addresses {\n                id\n            }\n        }\n    }\n`;\n\nconst getAttestationsQuery = () =>\n  `\n    {\n        attestations(skip: ${attestationsPageIdx *\n          itemsPerPage}, first: ${itemsPerPage}) {\n            id\n            subjectIdentity {\n                id\n            }\n            attesterIdentity {\n                id\n            }\n        }\n    }\n`;\n\nconst getVisibleLinks = (nodes, links) => {\n  const visibleLinks = [];\n  for (const l of links) {\n    if (\n      nodes.some(n => n.id === l.source) &&\n      nodes.some(n => n.id === l.target)\n    ) {\n      visibleLinks.push(Object.assign({}, l));\n    }\n  }\n  return visibleLinks;\n};\n\nconst concatLinksOnWidth = links => {\n  const newLinkIds = {};\n  const newLinks = [];\n  for (const l of links) {\n    const key = `${l.source}-${l.target}`;\n    let idx = newLinkIds[key];\n    if (idx) {\n      newLinks[idx].width += 1;\n    } else {\n      idx = newLinks.push({\n        source: l.source,\n        target: l.target,\n        width: 1\n      });\n      newLinkIds[key] = idx - 1;\n    }\n  }\n  return newLinks;\n};\n\nconst QueryVisualizer = () => {\n  const [isLaunched, setIsLaunched] = React.useState(false);\n  const [nodes, setNodes] = React.useState([]);\n  const [links, setLinks] = React.useState([]);\n\n  const processIdentities = prevNodes => ({ identities }) => {\n    const newNodes = [];\n    for (const identity of identities) {\n      const { id, bltBalance, subjectOf, attesterOf } = identity;\n      let color, val, name;\n      const isAttester = 0 < attesterOf.length;\n      const balanceNumber = bigInt(bltBalance)\n        .divide(bigInt(10).pow(bigInt(18)))\n        .valueOf();\n      if (isAttester) {\n        val = attesterOf.length;\n        color = \"#00f000\";\n        name = `Role: attester`;\n      } else {\n        val = balanceNumber;\n        color = \"#0000f0\";\n        name = `Role: User`;\n      }\n      name += `, Addresses: [${identity.addresses.map(\n        ({ id }) => `${id.substr(0, 6)}â€¦${id.substr(38, 4)} `\n      )}], \\nBLT Balance: ${balanceNumber}, Nb Attestations: ${subjectOf.length +\n        attesterOf.length}`;\n      val = Math.min(20, Math.max(1, val));\n      newNodes.push({\n        id,\n        val,\n        color,\n        name\n      });\n    }\n    const currentNodes = prevNodes.concat(newNodes);\n    setNodes(currentNodes);\n    identitiesPageIdx += 1;\n    if (identities.length === itemsPerPage) fetchMoreIdentities(currentNodes);\n  };\n\n  const fetchMoreIdentities = prevNodes => {\n    client.request(getIdentitiesQuery()).then(processIdentities(prevNodes));\n  };\n\n  const processAttestations = prevLinks => ({ attestations }) => {\n    const newLinks = [];\n    for (const attestation of attestations) {\n      newLinks.push({\n        source: attestation.attesterIdentity.id,\n        target: attestation.subjectIdentity.id\n      });\n    }\n    const currentLinks = prevLinks.concat(newLinks);\n    setLinks(currentLinks);\n    attestationsPageIdx += 1;\n    if (attestations.length === itemsPerPage)\n      fetchMoreAttestations(currentLinks);\n  };\n\n  const fetchMoreAttestations = prevLinks => {\n    client.request(getAttestationsQuery()).then(processAttestations(prevLinks));\n  };\n\n  if (!isLaunched) {\n    setIsLaunched(true);\n    fetchMoreIdentities([]);\n    fetchMoreAttestations([]);\n  }\n\n  const graphData = {\n    nodes,\n    links: concatLinksOnWidth(getVisibleLinks(nodes, links))\n  };\n  if (!nodes.length)\n    return (\n      <div className={\"centeringWrapper\"}>\n        <Loader type=\"Grid\" color=\"#0000a0\" height={100} width={100} />\n      </div>\n    );\n  return (\n    <ForceGraph2D\n      graphData={graphData}\n      linkWidth={\"width\"}\n      linkDirectionalParticles={2}\n      linkDirectionalParticleWidth={0.64}\n    />\n  );\n};\n\nexport default QueryVisualizer;\n","import React from \"react\";\nimport QueryVisualizer from \"./components/QueryVisualizer\";\n\nif (!process.env.REACT_APP_GRAPHQL_ENDPOINT) {\n  throw new Error(\n    \"REACT_APP_GRAPHQL_ENDPOINT environment variable not defined\"\n  );\n}\n\nconst App = () => <QueryVisualizer />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}